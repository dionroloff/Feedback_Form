{"version":3,"sources":["components/Review/ReviewFeelings.js","components/Review/ReviewUnderstanding.js","components/Review/ReviewSupport.js","components/Review/ReviewComments.js","components/Review/Review.js","components/Comments/Comments.js","components/Feeling/Feeling.js","components/Supported/Supported.js","components/Understanding/Understanding.js","components/ThankYou/ThankYou.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["ReviewFeelings","react_default","a","createElement","this","props","reduxStore","feelingReducer","Component","connect","ReviewUnderstandings","understandingReducer","ReviewSupport","supportReducer","ReviewComments","commentsReducer","Review","sendToDb","dataForServer","feeling","Number","_this","understanding","support","comments","axios","method","url","data","then","response","history","push","catch","error","errorMessage","concat","alert","isEnabled","bull","className","Card_default","CardContent_default","Typography_default","color","Review_ReviewFeelings","ReviewUnderstanding","Review_ReviewSupport","Review_ReviewComments","CardActions_default","Button_default","id","disabled","onClick","Comments","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleNextButton","event","preventDefault","state","action","type","payload","dispatch","handleChange","setState","target","value","console","log","variant","component","TextField_default","onChange","label","placeholder","multiline","margin","components_Review_Review","Feelings","require","Supported","Understanding","ThankYou","returnToStart","App","HashRouter","Route","exact","path","Feeling","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","storeInstance","createStore","combineReducers","arguments","length","undefined","applyMiddleware","logger","ReactDOM","render","es","store","components_App_App","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.71dacb15.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass ReviewFeelings extends Component {\n    render() {\n        return(\n            <p>Feelings: {this.props.reduxStore.feelingReducer}</p>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(ReviewFeelings);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass ReviewUnderstandings extends Component {\n    render() {\n        return(\n            <p>Understanding: {this.props.reduxStore.understandingReducer}</p>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(ReviewUnderstandings);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nclass ReviewSupport extends Component {\n    render() {\n        return(\n            <p>Support: {this.props.reduxStore.supportReducer}</p>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore\n});\n\nexport default connect(mapReduxStoreToProps)(ReviewSupport);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\n\nclass ReviewComments extends Component {\n    \n    render() {\n        return(\n            <p>Comments: {this.props.reduxStore.commentsReducer}</p>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore\n})\n\nexport default connect(mapReduxStoreToProps)(ReviewComments);","//Review.js\n// This will be the current redux values displayed on the DOM\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport ReviewFeelings from './ReviewFeelings.js';\nimport ReviewUnderstanding from './ReviewUnderstanding.js';\nimport ReviewSupport from './ReviewSupport.js';\nimport ReviewComments from './ReviewComments';\nimport './../App/App.css';\n//Material UI\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\n\nclass Review extends Component {\n\n\n    //Collects all the user's inputs from\n    //the respective reducers, package that data into\n    //'const userReviewInputs' and POST that to \n    //the database, and finally, bring the user to \n    //the thank you page.\n    sendToDb = () => {\n\n        const dataForServer = {\n            feeling: Number(this.props.reduxStore.feelingReducer),\n            understanding: Number(this.props.reduxStore.understandingReducer),\n            support: Number(this.props.reduxStore.supportReducer),\n            comments: this.props.reduxStore.commentsReducer\n        };\n\n        axios({\n            method: 'POST',\n            url: '/user-inputs',\n            data: dataForServer\n        }).then((response) => {\n            this.props.history.push('/thank-you');\n        }).catch((error) => {\n            const errorMessage = `Server error: ${error}`;\n            alert(errorMessage);\n        })\n        \n    } //end sendToDb\n\n    render() {\n        //console.log(this.state);\n        const isEnabled = this.props.reduxStore.commentsReducer !== '';\n        const bull = <p>•</p>;\n        \n        return (\n            <div className='review-card'>\n                <Card>\n                    <CardContent >\n                        <Typography color='textPrimary'>\n                            <h2>Review Your Feedback</h2>\n                        </Typography>\n                        <Typography color='textSecondary'>\n                            {bull}\n                            <ReviewFeelings />\n                            <ReviewUnderstanding />\n                            <ReviewSupport />\n                            <ReviewComments />\n                            {bull}\n                        </Typography>\n                        <CardActions>\n                            <Button id='submit-button' disabled={!isEnabled} onClick={this.sendToDb}>Submit</Button>\n                        </CardActions>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(Review);","//Comments.js\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Review from './../Review/Review.js';\n//Material UI\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nclass Comments extends Component {\n\n    constructor() {\n        super(); {\n            this.state = {\n                value: '',\n            }\n        }\n    }\n\n    //When the user clicks the next button on the comments page, the input\n    //will dispatch to the commentsReducer function, which will\n    //render the return value on the review card\n    handleNextButton = (event) => {\n        event.preventDefault();\n        if (this.state.response !== '') {\n            const action = {type: 'SUBMIT_COMMENTS', payload: this.state.response};\n            this.props.dispatch(action);\n            this.props.history.push('/review');\n        } else {\n            alert('Please fill in a response.');\n        }\n    } //end handleNextButton\n\n    //sets state to user's comments\n    handleChange = (event) => {\n        this.setState({\n            response: event.target.value,\n        })\n    } //end handleChange\n\n    render() {\n        console.log(this.state.response);\n        return(\n            <div>\n                <Card>\n                    <CardContent>\n\n                        <Typography color=\"textPrimary\">\n                            <h1>Any comments you want to leave?</h1>\n                        </Typography>\n\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <TextField\n                                onChange={this.handleChange}\n                                id='commentsInput'\n                                label='Comments?'\n                                placeholder='Write here.'\n                                multiline margin='normal' />\n                        </Typography>\n\n                    </CardContent>\n                    <CardActions>\n                    <Button id='comments-next-btn' variant='contained' color='primary' onClick={this.handleNextButton}>\n                        Next\n                    </Button>\n                    </CardActions>\n                </Card>\n                <Card>\n                    <CardContent>\n                        <Review /> \n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(Comments);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Review from './../Review/Review.js';\nimport './Feeling.css';\n//Material UI\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nclass Feelings extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            response: '',\n        }\n    }\n\n    //After the user inputs a number and clicks submit, payload is dispatched\n    //to feelingsReducer in index.js\n    handleNextButton = (event) => {\n        event.preventDefault();\n        if (this.state.response !== '') {\n            const action = {type: 'SUBMIT_FEELINGS', payload: this.state.response}\n            this.props.dispatch(action);\n            this.props.history.push('/understanding');\n        } else {\n            alert('Please fill in a response.')\n        }\n    } //end handleNextButton\n\n    handleChange = (event) => {\n        this.setState({\n            response: event.target.value,\n        })\n    } //end handleChange\n\n    render() {\n        console.log(this.state.response);\n        return (\n            <div>\n                <Card>\n                    <CardContent>\n\n                        <Typography color=\"textPrimary\">\n                            <h1>How are you feeling today?</h1>\n                        </Typography>\n\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <TextField\n                                onChange={this.handleChange}\n                                id='feelingInput'\n                                label='Feeling?'\n                                placeholder='From 1 and 5'\n                                multiline margin='normal' \n                                require />\n                        </Typography>\n\n                    </CardContent>\n                    <CardActions>\n                    <Button id='feeling-next-btn' onClick={this.handleNextButton} variant='contained' color='primary'>\n                        Next\n                    </Button>\n                    </CardActions>\n                </Card>\n                <Card>\n                    <CardContent>\n                        <Review /> \n                    </CardContent>\n                </Card>\n            </div>\n            )\n    }\n\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(Feelings);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Review from './../Review/Review.js';\n//Material UI\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nclass Supported extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            response: '',\n        }\n    }\n\n    //This will take the users input and dispatch to the\n    //supportReducer function, which will log the input to\n    //the review card at the bottom of the screen\n    handleNextButton = (event) => {\n        event.preventDefault();\n        if (this.state.response !== '') {\n            const action = {type: 'SUBMIT_SUPPORT', payload: this.state.response};\n            this.props.dispatch(action);\n            this.props.history.push('/comments');\n        } else {\n            alert('Please fill in a response.');\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            response: event.target.value,\n        })\n    }\n\n    render() {\n        console.log(this.state.response);\n        return(\n            <div>\n                <Card>\n                    <CardContent>\n\n                        <Typography color=\"textPrimary\">\n                            <h1>How well are you being supported?</h1>\n                        </Typography>\n\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <TextField\n                                onChange={this.handleChange}\n                                id='supportedInput'\n                                label='Supported?'\n                                placeholder='From 1 and 5'\n                                multiline margin='normal' />\n                        </Typography>\n\n                    </CardContent>\n                    <CardActions>\n                    <Button id='supported-next-btn' onClick={this.handleNextButton} variant='contained' color='primary'>\n                        Next\n                    </Button>\n                    </CardActions>\n                </Card>\n                <Card>\n                    <CardContent>\n                        <Review /> \n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(Supported);","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Review from './../Review/Review.js';\n//Material UI\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\n\nclass Understanding extends Component {\n\n    constructor() {\n        super();\n        this.state = {\n            response: '',\n        }\n    }\n\n    //This will take the users input and dispatch to the understandingReducer\n    //which will log the return value to the review card\n    handleNextButton = (event) => {\n        event.preventDefault();\n        if (this.state.response !== '') {\n            const action = {type: 'SUBMIT_UNDERSTANDING', payload: this.state.response}\n            this.props.dispatch(action);\n            this.props.history.push('/supported');\n        } else {\n            alert('Please fill in a response.');\n        }\n    } //end handleNextButton\n\n    handleChange = (event) => {\n        this.setState({\n            response: event.target.value,\n        })\n    } //end handleChange\n\n    render() {\n        console.log(this.state.response);\n        return(\n            <div>\n                <Card>\n                    <CardContent>\n\n                        <Typography color=\"textPrimary\">\n                            <h1>How well are you understanding the content?</h1>\n                        </Typography>\n\n                        <Typography variant=\"h5\" component=\"h2\">\n                            <TextField\n                                onChange={this.handleChange}\n                                id='understandingInput'\n                                label='Understanding?'\n                                placeholder='From 1 and 5'\n                                multiline margin='normal' />\n                        </Typography>\n\n                    </CardContent>\n                    <CardActions>\n                    <Button id='understanding-next-btn' onClick={this.handleNextButton} variant='contained' color='primary'>\n                        Next\n                    </Button>\n                    </CardActions>\n                </Card>\n                <Card>\n                    <CardContent>\n                        <Review /> \n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n    \n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(Understanding);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n//Material UI\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nclass ThankYou extends Component {\n\n    returnToStart = () => {\n        this.props.history.push('/');\n    }\n\n    render() {\n        return (\n            <div>\n                <Card>\n                    <CardContent>\n                        <Typography color='textPrimary'>\n                            <h1>Thank You!</h1>\n                        </Typography>\n                        <CardActions>\n                            <Button onClick={this.returnToStart} id='feedback-btn' variant='contained' color='primary'>Leave New Feedback</Button>\n                        </CardActions>\n                    </CardContent>\n                </Card>\n            </div>\n        )\n    }\n}\n\nconst mapReduxStoreToProps = (reduxStore) => ({\n    reduxStore: reduxStore,\n});\n\nexport default connect(mapReduxStoreToProps)(ThankYou);","//App.js\nimport React, { Component } from 'react';\nimport { HashRouter as Router, Route, Link } from 'react-router-dom';\nimport './App.css';\n\n//Components\nimport Comments from './../Comments/Comments.js';\nimport Feeling from './../Feeling/Feeling.js';\nimport Supported from './../Supported/Supported.js';\nimport Understanding from './../Understanding/Understanding.js';\nimport ThankYou from './../ThankYou/ThankYou.js';\nimport Review from './../Review/Review.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Feedback!</h1>\n          <h4><i>Don't forget it!</i></h4>\n        </header>\n        <br/>\n\n        {/* Hashrouter */}\n        <Router>\n          <div>\n            {/* Links */}\n            {/* <Link to='/'> How are you feeling |</Link>\n            <Link to='/understanding'> How are you understanding the material |</Link>\n            <Link to='/supported'> Do you feel supported |</Link>\n            <Link to='/comments'> Any comments? |</Link>\n            <Link to='/thank-you'> Thank you page |</Link>\n            <Link to='/review'> Review |</Link> */}\n\n            {/* Routes */}\n            <Route exact path={'/'} component={Feeling} />\n            <Route exact path={'/understanding'} component={Understanding} />\n            <Route exact path={'/supported'} component={Supported} />\n            <Route exact path={'/comments'} component={Comments} />\n            <Route exact path={'/thank-you'} component={ThankYou} />\n            <Route exact path={'/review'} component={Review} />\n          \n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport registerServiceWorker from './registerServiceWorker';\n\n//Redux\nimport {createStore, combineReducers, applyMiddleware} from 'redux';\nimport {Provider} from 'react-redux';\nimport {logger} from 'redux-logger';\n\n//My reducers\n\n//This reducer will run when user clicks submit on feelings page\nconst feelingReducer = (state = '', action) => {\n    if (action.type === 'SUBMIT_FEELINGS') {\n        console.log('in feelingReducer');\n        return action.payload;\n    }\n    return state;\n} //end feelingsReducer\n\n//This reducer will run when the user clicks submit on understanding page\nconst understandingReducer = (state = '', action) => {\n    if (action.type === 'SUBMIT_UNDERSTANDING') {\n        console.log('in understandingReducer');\n        return action.payload;\n    }\n    return state;\n} //end understandingReducer\n\n//This reducer will run when the user clicks submit on the support page\nconst supportReducer = (state = '', action) => {\n    if (action.type === 'SUBMIT_SUPPORT') {\n        console.log('in supportReducer');\n        return action.payload;\n    }\n    return state;\n} //end supportReducer\n\n//this reducer will run when the user clicks submit on the comments page\nconst commentsReducer = (state = '', action) => {\n    if (action.type === 'SUBMIT_COMMENTS') {\n        console.log('in commentsReducer');\n        return action.payload;\n    }\n    return state;\n} //end commentsReducer\n\nconst storeInstance = createStore(\n    combineReducers({\n        feelingReducer,\n        understandingReducer,\n        supportReducer,\n        commentsReducer\n    }),\n    applyMiddleware(logger),\n)\n\nReactDOM.render(<Provider store={storeInstance}><App /></Provider>, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}